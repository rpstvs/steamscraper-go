// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: bag.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createBag = `-- name: CreateBag :one
INSERT INTO Bag (Id, TotalValue, User_id)
VALUES ($1, $2, $3)
RETURNING id, user_id, totalvalue
`

type CreateBagParams struct {
	ID         uuid.UUID
	Totalvalue float64
	UserID     uuid.UUID
}

func (q *Queries) CreateBag(ctx context.Context, arg CreateBagParams) (Bag, error) {
	row := q.db.QueryRowContext(ctx, createBag, arg.ID, arg.Totalvalue, arg.UserID)
	var i Bag
	err := row.Scan(&i.ID, &i.UserID, &i.Totalvalue)
	return i, err
}

const getBagbyID = `-- name: GetBagbyID :one
SELECT id, user_id, totalvalue
FROM Bag
WHERE Id = $1
`

func (q *Queries) GetBagbyID(ctx context.Context, id uuid.UUID) (Bag, error) {
	row := q.db.QueryRowContext(ctx, getBagbyID, id)
	var i Bag
	err := row.Scan(&i.ID, &i.UserID, &i.Totalvalue)
	return i, err
}

const updateBag = `-- name: UpdateBag :one
UPDATE Bag
SET TotalValue = $2
WHERE Id = $1
RETURNING id, user_id, totalvalue
`

type UpdateBagParams struct {
	ID         uuid.UUID
	Totalvalue float64
}

func (q *Queries) UpdateBag(ctx context.Context, arg UpdateBagParams) (Bag, error) {
	row := q.db.QueryRowContext(ctx, updateBag, arg.ID, arg.Totalvalue)
	var i Bag
	err := row.Scan(&i.ID, &i.UserID, &i.Totalvalue)
	return i, err
}
