// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: item.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createItem = `-- name: CreateItem :one
INSERT INTO Items (id, ItemName)
VALUES ($1, $2)
RETURNING id, itemname
`

type CreateItemParams struct {
	ID       uuid.UUID
	Itemname string
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem, arg.ID, arg.Itemname)
	var i Item
	err := row.Scan(&i.ID, &i.Itemname)
	return i, err
}

const getItemsIds = `-- name: GetItemsIds :many
SELECT Id
FROM Items
`

func (q *Queries) GetItemsIds(ctx context.Context) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getItemsIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
